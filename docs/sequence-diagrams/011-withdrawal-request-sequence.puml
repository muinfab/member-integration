@startuml 011-withdrawal-request-sequence
!theme plain
title 탈퇴 요청 API 시퀀스 다이어그램 (IDMI-REWARDS-011)

actor Client as "클라이언트"
participant Controller as "MembershipController"
participant Service as "MembershipService"
participant Repository as "MemberRepository"
participant WithdrawalRepository as "WithdrawalRepository"
database Database as "Database"

== 탈퇴 요청 ==

Client -> Controller: POST /v1/membership/hub/member/withdrawal/request
activate Controller

note right of Client: memberType: W\nloginId: axlrose\nloginPw: axlrose123!\nwithdrawalReason: 001

Controller -> Controller: 요청 파라미터 검증
note right: - 필수 필드 검증\n- memberType, loginId, loginPw, withdrawalReason\n- 비밀번호 형식 검증

Controller -> Service: requestWithdrawal(withdrawalRequest)
activate Service

Service -> Service: 회원 정보 조회
Service -> Repository: findByLoginId(loginId)
activate Repository
Repository -> Database: SELECT * FROM members\nWHERE login_id = ?\nOR rewards_membership_id = ?\nOR web_member_id = ?
Database --> Repository: 회원 정보
Repository --> Service: Member member
deactivate Repository

alt 회원 정보 없음
    Service --> Controller: ErrorResponse(회원 정보 없음)
    Controller --> Client: HTTP 404\nNot Found\nresultCode: ERR102\nmsg: 회원 정보를 찾을 수 없습니다
    deactivate Controller
    deactivate Service
end

Service -> Service: 비밀번호 검증
note right: BCrypt로 입력된 비밀번호와\n저장된 비밀번호 해시 비교

alt 비밀번호 불일치
    Service --> Controller: ErrorResponse(비밀번호 불일치)
    Controller --> Client: HTTP 400\nBad Request\nresultCode: ERR103\nmsg: 비밀번호가 일치하지 않습니다
    deactivate Controller
    deactivate Service
end

Service -> Service: 탈퇴 가능 여부 확인
note right: - 이미 탈퇴된 회원인지 확인\n- 탈퇴 처리 중인 회원인지 확인

alt 이미 탈퇴된 회원
    Service --> Controller: ErrorResponse(이미 탈퇴된 회원)
    Controller --> Client: HTTP 400\nBad Request\nresultCode: ERR104\nmsg: 이미 탈퇴된 회원입니다
    deactivate Controller
    deactivate Service
end

Service -> Service: 탈퇴 요청 처리
note right: - 회원 상태를 탈퇴 요청으로 변경\n- 탈퇴 사유 및 요청일시 기록

Service -> Repository: updateMemberStatus(memberId, WITHDRAWAL_REQUESTED)
activate Repository
Repository -> Database: UPDATE members\nSET member_status = 'WITHDRAWAL_REQUESTED',\nwithdrawal_reason = ?,\nwithdrawal_request_date = NOW()\nWHERE id = ?
Database --> Repository: 업데이트 완료
Repository --> Service: boolean updated
deactivate Repository

Service -> Service: 탈퇴 이력 저장
Service -> WithdrawalRepository: saveWithdrawalHistory(memberId, withdrawalReason)
activate WithdrawalRepository
WithdrawalRepository -> Database: INSERT INTO withdrawal_history\n(member_id, withdrawal_reason, request_date, status)\nVALUES (?, ?, NOW(), 'REQUESTED')
Database --> WithdrawalRepository: 이력 저장 완료
WithdrawalRepository --> Service: WithdrawalHistory saved
deactivate WithdrawalRepository

Service -> Service: CMS 서버 동기화 호출
Service -> "CMS Server": POST /v1/membership/integration/sync\n(탈퇴 요청 회원 정보 동기화)
note right: memberType, membershipNo, membershipId\nmemberName, memberMobile, memberEmail\nmemberStatus: WITHDRAWAL_REQUESTED\nwithdrawalReason, withdrawalRequestDate 등 전송

alt CMS 동기화 성공
    "CMS Server" --> Service: resultCode: 200\nmsg: Success
    Service -> Service: CMS 동기화 완료 처리
else CMS 동기화 실패
    "CMS Server" --> Service: Error Response
    Service -> Service: CMS 동기화 실패 로그 기록
    note right: 동기화 실패해도\n탈퇴 요청은 완료
end

Service -> Service: 탈퇴 요청 완료 처리
note right: - 탈퇴 요청 성공\n- 실제 탈퇴는 별도 프로세스에서 처리

Service --> Controller: WithdrawalResponse()
deactivate Service

Controller -> Controller: 응답 데이터 구성
note right: resultCode: 1000\nmsg: Success\ndata: null

Controller --> Client: HTTP 200 OK\n탈퇴 요청 완료 응답
deactivate Controller

== 에러 처리 ==

alt 파라미터 검증 실패
    Controller -> Controller: 파라미터 검증 실패 처리
    Controller --> Client: HTTP 400\nBad Request\nresultCode: ERR001\nmsg: 필수 파라미터가 누락되었습니다
end

alt 데이터베이스 오류
    Service -> Service: 데이터베이스 오류 처리
    Service --> Controller: ErrorResponse
    Controller --> Client: HTTP 500\nInternal Server Error\nresultCode: ERR999\nmsg: 시스템 오류가 발생했습니다
end

@enduml 